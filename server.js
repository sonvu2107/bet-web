require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const session = require('express-session');
const path = require('path');
const app = express();
const http = require('http');
const { Server } = require('socket.io');

// üß† MODELS
const User = require('./models/User');

// üõ£Ô∏è ROUTES
const authRoutes = require('./routes/auth');
const betRoutes = require('./routes/bet');
const adminRoutes = require('./routes/admin');
const chatRoutes = require('./routes/chat');

// ‚úÖ MIDDLEWARE
app.use(express.urlencoded({ extended: true }));    // h·ªó tr·ª£ form
app.use(express.json());                            // h·ªó tr·ª£ JSON (fetch API)
app.use(express.static(path.join(__dirname, 'public'))); // file tƒ©nh
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// üîê SESSION
app.use(session({
    secret: 'secret-key', 
    resave: false,
    saveUninitialized: true
}));

console.log("MONGO_URL:", process.env.MONGO_URL);

// üåê DATABASE
mongoose.connect(process.env.MONGO_URL)
    .then(() => console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB'))
    .catch(err => console.error('‚ùå MongoDB connection error:', err));

// üîÅ ROUTING
app.get('/', (req, res) => {
    res.redirect('/bet/dashboard');
});

app.use('/', authRoutes);
app.use('/bet', betRoutes);
app.use('/admin', adminRoutes);
app.use('/api/chat', chatRoutes);
app.use('/bet', express.static('public')); 

//  API: Tr·∫£ l·∫°i username t·ª´ session (d√πng cho chat)
app.get('/get-username', async (req, res) => {
  if (!req.session?.user?.username) return res.json({ username: '·∫®n danh', score: 0 });
  const user = await User.findOne({ username: req.session.user.username });
  res.json({ username: user.username, score: user.score ?? 0 });
});

// Qu·∫£n l√Ω c√°c ph√≤ng ch·ªù
const waitingPlayers = [];
let roomCounter = 1;

function createDeck() {
  const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
  const ranks = ['3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A', '2'];
  const deck = [];
  for (const suit of suits) {
    for (const rank of ranks) {
      deck.push(rank + suit);
    }
  }
  return deck;
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// L∆∞u tr·∫°ng th√°i b√†n ch∆°i cho t·ª´ng ph√≤ng
const gameRooms = {}; // { roomName: { tableCards: [] } }

const server = http.createServer(app);
const io = new Server(server);

// H√†m ki·ªÉm tra lo·∫°i b√†i Ti·∫øn l√™n
const rankOrder = ['3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A', '2'];
function getRankValue(card) {
  return rankOrder.indexOf(card.slice(0, -1));
}
function getSuit(card) {
  return card.slice(-1);
}
function isSingle(cards) {
  return cards.length === 1;
}
function isPair(cards) {
  return cards.length === 2 && getRankValue(cards[0]) === getRankValue(cards[1]);
}
function isTriple(cards) {
  return cards.length === 3 &&
    getRankValue(cards[0]) === getRankValue(cards[1]) &&
    getRankValue(cards[1]) === getRankValue(cards[2]);
}
function isFourOfAKind(cards) {
  return cards.length === 4 &&
    getRankValue(cards[0]) === getRankValue(cards[1]) &&
    getRankValue(cards[1]) === getRankValue(cards[2]) &&
    getRankValue(cards[2]) === getRankValue(cards[3]);
}
function isStraight(cards) {
  if (cards.length < 3) return false;
  const values = cards.map(getRankValue).sort((a, b) => a - b);
  // Kh√¥ng cho ph√©p c√≥ '2' trong s·∫£nh
  if (values.includes(rankOrder.length - 1)) return false;
  for (let i = 1; i < values.length; i++) {
    if (values[i] !== values[i - 1] + 1) return false;
  }
  return true;
}
function isConsecutivePairs(cards) {
  if (cards.length < 6 || cards.length % 2 !== 0) return false;
  // Kh√¥ng cho ph√©p c√≥ '2' trong ƒë√¥i th√¥ng
  const values = cards.map(getRankValue).sort((a, b) => a - b);
  for (let i = 0; i < cards.length; i += 2) {
    if (values[i] !== values[i + 1]) return false;
    if (i > 0 && values[i] !== values[i - 2] + 1) return false;
    if (values[i] === rankOrder.length - 1) return false;
  }
  return true;
}
function getHandType(cards) {
  if (isSingle(cards)) return { type: 'single', value: getRankValue(cards[0]) };
  if (isPair(cards)) return { type: 'pair', value: getRankValue(cards[0]) };
  if (isTriple(cards)) return { type: 'triple', value: getRankValue(cards[0]) };
  if (isFourOfAKind(cards)) return { type: 'four', value: getRankValue(cards[0]) };
  if (isStraight(cards)) return { type: 'straight', value: Math.max(...cards.map(getRankValue)) };
  if (isConsecutivePairs(cards)) return { type: 'consecutive_pairs', value: Math.max(...cards.map(getRankValue)) };
  return { type: 'invalid' };
}

io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);
  // ·ªû ƒë√¢y s·∫Ω x·ª≠ l√Ω logic ph√≤ng, chia b√†i, v.v.

  socket.on('joinTienLen', (username) => {
    console.log('joinTienLen:', username, socket.id);
    // L∆∞u username v√†o socket ƒë·ªÉ ƒë·ªìng b·ªô ƒëi·ªÉm sau n√†y
    socket.data = socket.data || {};
    socket.data.username = username;
    // L∆∞u th√¥ng tin ng∆∞·ªùi ch∆°i v√†o h√†ng ƒë·ª£i
    waitingPlayers.push({ socket, username });
    console.log('waitingPlayers:', waitingPlayers.map(p => p.username + ':' + p.socket.id));

    // N·∫øu ƒë·ªß 4 ng∆∞·ªùi, t·∫°o ph√≤ng m·ªõi
    if (waitingPlayers.length >= 4) {
      const roomName = `tienlen_room_${roomCounter++}`;
      const players = waitingPlayers.splice(0, 4);
      console.log('T·∫°o ph√≤ng:', roomName, 'players:', players.map(p => p.username + ':' + p.socket.id));

      // Th√™m t·ª´ng ng∆∞·ªùi v√†o ph√≤ng
      players.forEach((player, idx) => {
        player.socket.join(roomName);
        // G·ª≠i th√¥ng b√°o cho client: ƒë√£ v√†o ph√≤ng, k√®m v·ªã tr√≠ (idx)
        player.socket.emit('roomJoined', { room: roomName, seat: idx + 1 });
      });

      // Th√¥ng b√°o cho c·∫£ ph√≤ng: game ready
      io.to(roomName).emit('gameReady', { room: roomName });

      // Chia b√†i ng·∫´u nhi√™n
      let deck = createDeck();
      deck = shuffle(deck);
      const hands = [[], [], [], []];
      for (let i = 0; i < 52; i++) {
        hands[i % 4].push(deck[i]);
      }
      // Kh·ªüi t·∫°o tr·∫°ng th√°i ph√≤ng ch∆°i tr∆∞·ªõc
      gameRooms[roomName] = {
        tableCards: [],
        players: players.map(p => p.socket.id), // L∆∞u danh s√°ch socketId c·ªßa 4 ng∆∞·ªùi ch∆°i
        currentTurn: players[0].socket.id, // Ng∆∞·ªùi ƒë·∫ßu ti√™n ƒëi tr∆∞·ªõc (c√≥ th·ªÉ random n·∫øu mu·ªën)
        passed: [], // Danh s√°ch socketId ƒë√£ b·ªè l∆∞·ª£t trong v√≤ng hi·ªán t·∫°i
        hands: {}, // { socketId: [b√†i c·ªßa ng∆∞·ªùi ch∆°i] }
        winners: [], // Danh s√°ch ng∆∞·ªùi ƒë√£ th·∫Øng
        lastPlayed: players[0].socket.id, // Ng∆∞·ªùi v·ª´a ƒë√°nh cu·ªëi c√πng
        betAmount: 50 // Gi√° tr·ªã m·∫∑c ƒë·ªãnh, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t n·∫øu ch·ªß ph√≤ng ch·ªçn
      };
      // L∆∞u b√†i cho t·ª´ng ng∆∞·ªùi ch∆°i
      players.forEach((player, idx) => {
        gameRooms[roomName].hands[player.socket.id] = hands[idx];
      });
      // G·ª≠i b√†i cho t·ª´ng ng∆∞·ªùi ch∆°i trong ph√≤ng
      const usernames = players.map(p => p.username);
      players.forEach((player, idx) => {
        player.socket.emit('dealCards', { hand: hands[idx], players: players.map(p => p.socket.id), yourIndex: idx, betAmount: gameRooms[roomName].betAmount, usernames });
      });

      // G·ª≠i th√¥ng b√°o l∆∞·ª£t ƒë·∫ßu ti√™n cho c·∫£ ph√≤ng
      io.to(roomName).emit('nextTurn', {
        currentTurn: gameRooms[roomName].currentTurn,
        handsCount: getHandsCount(gameRooms[roomName]),
        winners: gameRooms[roomName].winners,
        players: gameRooms[roomName].players
      });
    }
  });

  // X·ª≠ l√Ω s·ª± ki·ªán ƒë√°nh b√†i
  socket.on('playCards', ({ cards }) => {
    // X√°c ƒë·ªãnh ph√≤ng c·ªßa ng∆∞·ªùi ch∆°i
    const rooms = Array.from(socket.rooms).filter(r => r.startsWith('tienlen_room_'));
    if (rooms.length === 0) return;
    const room = rooms[0];
    const game = gameRooms[room];
    if (!game) return;

    // Ch·ªâ cho ph√©p ng∆∞·ªùi c√≥ l∆∞·ª£t ƒë∆∞·ª£c ƒë√°nh
    if (socket.id !== game.currentTurn) {
      socket.emit('playResult', { success: false, message: 'Ch∆∞a ƒë·∫øn l∆∞·ª£t b·∫°n!' });
      return;
    }

    // Ki·ªÉm tra h·ª£p l·ªá b·ªô b√†i theo lu·∫≠t Ti·∫øn l√™n
    const handType = getHandType(cards);
    if (handType.type === 'invalid') {
      socket.emit('playResult', { success: false, message: 'B·ªô b√†i kh√¥ng h·ª£p l·ªá!' });
      return;
    }

    // So s√°nh v·ªõi b√†i tr√™n b√†n (bao g·ªìm lu·∫≠t ƒë·∫∑c bi·ªát)
    const tableCards = game.tableCards;
    if (tableCards.length > 0) {
      const tableType = getHandType(tableCards);
      // === LU·∫¨T ƒê·∫∂C BI·ªÜT ===
      if (tableType.type === 'single' && getRankValue(tableCards[0]) === rankOrder.length - 1) { // B√†n l√† 2
        if (handType.type === 'four') {
          game.tableCards = cards;
          game.passed = [];
          game.lastPlayed = socket.id;
          removeCards(game.hands[socket.id], cards);
          io.to(room).emit('playResult', { success: true, tableCards: cards });
          io.to(room).emit('updateHandsCount', { handsCount: getHandsCount(game), players: game.players });
          checkWinAndNextTurn(room, socket.id);
          return;
        }
        if (handType.type === 'consecutive_pairs' && cards.length >= 6) {
          game.tableCards = cards;
          game.passed = [];
          game.lastPlayed = socket.id;
          removeCards(game.hands[socket.id], cards);
          io.to(room).emit('playResult', { success: true, tableCards: cards });
          io.to(room).emit('updateHandsCount', { handsCount: getHandsCount(game), players: game.players });
          checkWinAndNextTurn(room, socket.id);
          return;
        }
      }
      if (tableType.type === 'consecutive_pairs' && tableCards.length >= 6) {
        if (handType.type === 'four') {
          game.tableCards = cards;
          game.passed = [];
          game.lastPlayed = socket.id;
          removeCards(game.hands[socket.id], cards);
          io.to(room).emit('playResult', { success: true, tableCards: cards });
          io.to(room).emit('updateHandsCount', { handsCount: getHandsCount(game), players: game.players });
          checkWinAndNextTurn(room, socket.id);
          return;
        }
      }
      if (tableType.type === 'four' && handType.type === 'four') {
        if (handType.value > tableType.value) {
          game.tableCards = cards;
          game.passed = [];
          game.lastPlayed = socket.id;
          removeCards(game.hands[socket.id], cards);
          io.to(room).emit('playResult', { success: true, tableCards: cards });
          io.to(room).emit('updateHandsCount', { handsCount: getHandsCount(game), players: game.players });
          checkWinAndNextTurn(room, socket.id);
          return;
        } else {
          socket.emit('playResult', { success: false, message: 'T·ª© qu√Ω c·ªßa b·∫°n nh·ªè h∆°n!' });
          return;
        }
      }
      // === K·∫æT TH√öC LU·∫¨T ƒê·∫∂C BI·ªÜT ===
      if (handType.type !== tableType.type || cards.length !== tableCards.length) {
        socket.emit('playResult', { success: false, message: 'B·∫°n ph·∫£i ƒë√°nh c√πng lo·∫°i v√† c√πng s·ªë l√° v·ªõi b√†i tr√™n b√†n!' });
        return;
      }
      if (handType.value <= tableType.value) {
        socket.emit('playResult', { success: false, message: 'B√†i b·∫°n ƒë√°nh ch∆∞a ƒë·ªß l·ªõn ƒë·ªÉ ch·∫∑t b√†i tr√™n b√†n!' });
        return;
      }
    }
    // N·∫øu b√†n tr·ªëng ho·∫∑c h·ª£p l·ªá
    game.tableCards = cards;
    game.passed = [];
    game.lastPlayed = socket.id;
    removeCards(game.hands[socket.id], cards);
    io.to(room).emit('playResult', { success: true, tableCards: cards });
    io.to(room).emit('updateHandsCount', { handsCount: getHandsCount(game), players: game.players });
    checkWinAndNextTurn(room, socket.id);
  });

  // X·ª≠ l√Ω s·ª± ki·ªán b·ªè l∆∞·ª£t
  socket.on('passTurn', () => {
    const rooms = Array.from(socket.rooms).filter(r => r.startsWith('tienlen_room_'));
    if (rooms.length === 0) return;
    const room = rooms[0];
    const game = gameRooms[room];
    if (!game) return;
    if (socket.id !== game.currentTurn) {
      socket.emit('playResult', { success: false, message: 'Ch∆∞a ƒë·∫øn l∆∞·ª£t b·∫°n!' });
      return;
    }
    if (!game.passed.includes(socket.id)) game.passed.push(socket.id);
    // N·∫øu 3 ng∆∞·ªùi li√™n ti·∫øp b·ªè l∆∞·ª£t (ch·ªâ c√≤n 1 ng∆∞·ªùi ch∆∞a pass), b√†n tr·ªëng, ng∆∞·ªùi v·ª´a ƒë√°nh cu·ªëi c√πng ƒë∆∞·ª£c ƒëi ƒë·∫ßu
    if (game.passed.length >= game.players.length - 1) {
      game.tableCards = [];
      game.passed = [];
      game.currentTurn = game.lastPlayed;
      io.to(room).emit('playResult', { success: true, tableCards: [] });
      io.to(room).emit('nextTurn', {
        currentTurn: game.currentTurn,
        handsCount: getHandsCount(game),
        winners: game.winners
      });
      return;
    }
    // Chuy·ªÉn l∆∞·ª£t cho ng∆∞·ªùi ti·∫øp theo ch∆∞a pass
    nextTurn(room, true);
  });

  socket.on('setBetAmount', async (amount) => {
    // T√¨m ph√≤ng c·ªßa socket
    const rooms = Array.from(socket.rooms).filter(r => r.startsWith('tienlen_room_'));
    if (rooms.length === 0) return;
    const room = rooms[0];
    if (!gameRooms[room]) return;
    // Ch·ªâ ch·ªß ph√≤ng m·ªõi ƒë∆∞·ª£c set
    if (gameRooms[room].players[0] === socket.id) {
      const bet = parseInt(amount) || 50;
      // Ki·ªÉm tra ƒëi·ªÉm c·ªßa t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
      let allOk = true;
      let notEnoughPlayers = [];
      for (const pid of gameRooms[room].players) {
        const playerSocket = io.sockets.sockets.get(pid);
        let username = null;
        if (playerSocket && playerSocket.data && playerSocket.data.username) {
          username = playerSocket.data.username;
        }
        if (!username) continue;
        const user = await User.findOne({ username });
        if (!user || user.score < bet) {
          allOk = false;
          notEnoughPlayers.push(username || pid);
        }
      }
      if (!allOk) {
        socket.emit('betAmountError', { message: `C√≥ ng∆∞·ªùi ch∆°i kh√¥ng ƒë·ªß ƒëi·ªÉm (${notEnoughPlayers.join(', ')}) ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c ${bet}` });
        return;
      }
      gameRooms[room].betAmount = bet;
      io.to(room).emit('betAmount', gameRooms[room].betAmount);
    }
  });

  // X·ª≠ l√Ω s·ª± ki·ªán r·ªùi ph√≤ng
  socket.on('leaveRoom', () => {
    // T√¨m ph√≤ng c·ªßa socket
    const rooms = Array.from(socket.rooms).filter(r => r.startsWith('tienlen_room_'));
    if (rooms.length === 0) {
      socket.emit('leftRoom');
      return;
    }
    const room = rooms[0];
    // R·ªùi ph√≤ng socket.io
    socket.leave(room);
    // Log ng∆∞·ªùi ch∆°i r·ªùi ph√≤ng
    const username = socket.data && socket.data.username ? socket.data.username : '·∫®n danh';
    console.log(`[Ti·∫øn l√™n] ${username} (${socket.id}) ƒë√£ r·ªùi ph√≤ng ${room}`);
    // X√≥a kh·ªèi danh s√°ch players trong gameRooms
    if (gameRooms[room]) {
      gameRooms[room].players = gameRooms[room].players.filter(pid => pid !== socket.id);
      // N·∫øu l√† ng∆∞·ªùi cu·ªëi c√πng th√¨ x√≥a lu√¥n ph√≤ng
      if (gameRooms[room].players.length === 0) {
        delete gameRooms[room];
      }
    }
    socket.emit('leftRoom');
  });
});

// H√†m chuy·ªÉn l∆∞·ª£t cho ph√≤ng
function nextTurn(room, skipPassed = false) {
  const game = gameRooms[room];
  if (!game) return;
  const players = game.players.filter(pid => !game.winners.includes(pid));
  let idx = players.indexOf(game.currentTurn);
  let nextIdx = (idx + 1) % players.length;
  // N·∫øu skipPassed, t√¨m ng∆∞·ªùi ch∆∞a pass
  if (skipPassed) {
    let tries = 0;
    while (game.passed.includes(players[nextIdx]) && tries < players.length) {
      nextIdx = (nextIdx + 1) % players.length;
      tries++;
    }
  }
  game.currentTurn = players[nextIdx];
  io.to(room).emit('nextTurn', {
    currentTurn: game.currentTurn,
    handsCount: getHandsCount(game),
    winners: game.winners
  });
}

// H√†m lo·∫°i b·ªè c√°c l√° b√†i ƒë√£ ƒë√°nh kh·ªèi tay ng∆∞·ªùi ch∆°i
function removeCards(hand, cards) {
  for (const card of cards) {
    const idx = hand.indexOf(card);
    if (idx !== -1) hand.splice(idx, 1);
  }
}

// H√†m tr·∫£ v·ªÅ s·ªë b√†i c√≤n l·∫°i c·ªßa t·ª´ng ng∆∞·ªùi
function getHandsCount(game) {
  const result = {};
  for (const pid of game.players) {
    result[pid] = game.hands[pid] ? game.hands[pid].length : 0;
  }
  return result;
}

// Ki·ªÉm tra th·∫Øng cu·ªôc v√† chuy·ªÉn l∆∞·ª£t
async function checkWinAndNextTurn(room, playerId) {
  const game = gameRooms[room];
  if (!game) return;
  if (game.hands[playerId] && game.hands[playerId].length === 0 && !game.winners.includes(playerId)) {
    game.winners.push(playerId);
    io.to(room).emit('playerWin', { winner: playerId, winners: game.winners });
    // N·∫øu ch·ªâ c√≤n 1 ng∆∞·ªùi ch∆∞a th·∫Øng, k·∫øt th√∫c v√°n
    const activePlayers = game.players.filter(pid => !game.winners.includes(pid));
    if (activePlayers.length === 1) {
      game.winners.push(activePlayers[0]);
      io.to(room).emit('playerWin', { winner: activePlayers[0], winners: game.winners });

      // --- C·∫¨P NH·∫¨T ƒêI·ªÇM SAU V√ÅN TI·∫æN L√äN ---
      const bet = game.betAmount || 50;
      const allPlayers = game.players.map(pid => {
        const playerSocket = io.sockets.sockets.get(pid);
        let username = null;
        if (playerSocket && playerSocket.data && playerSocket.data.username) {
          username = playerSocket.data.username;
        }
        return { pid, username };
      });
      // X√°c ƒë·ªãnh winner (ng∆∞·ªùi v·ªÅ nh·∫•t) v√† losers (3 ng∆∞·ªùi c√≤n l·∫°i)
      const winnerPid = game.winners[0];
      const winner = allPlayers.find(p => p.pid === winnerPid);
      const losers = allPlayers.filter(p => p.pid !== winnerPid);
      if (winner && winner.username) {
        await User.updateOne(
          { username: winner.username },
          { $inc: { score: bet * losers.length } }
        );
        const user = await User.findOne({ username: winner.username });
        const winnerSocket = io.sockets.sockets.get(winnerPid);
        if (winnerSocket && user) winnerSocket.emit('updateScore', user.score);
        console.log(`[Ti·∫øn l√™n] ${winner.username} (${winnerPid}) th·∫Øng, c·ªông ${bet * losers.length} ƒëi·ªÉm, t·ªïng: ${user ? user.score : 'N/A'} (ph√≤ng: ${room})`);
      }
      for (const loser of losers) {
        if (loser.username) {
          await User.updateOne(
            { username: loser.username },
            { $inc: { score: -bet } }
          );
          const user = await User.findOne({ username: loser.username });
          const loserSocket = io.sockets.sockets.get(loser.pid);
          if (loserSocket && user) loserSocket.emit('updateScore', user.score);
          console.log(`[Ti·∫øn l√™n] ${loser.username} thua, tr·ª´ ${bet} ƒëi·ªÉm, c√≤n: ${user ? user.score : 'N/A'}`);
        }
      }
      // G·ª≠i popup ƒëi·ªÉm m·ªõi cho c·∫£ ph√≤ng
      const allScore = {};
      for (const p of allPlayers) {
        if (p.username) {
          const user = await User.findOne({ username: p.username });
          if (user) allScore[p.username] = user.score;
        }
      }
      io.to(room).emit('scoreChanged', allScore);
      return;
    }
  }
  // Chuy·ªÉn l∆∞·ª£t cho ng∆∞·ªùi ti·∫øp theo
  nextTurn(room);
}

// üöÄ START SERVER
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
});
